ðŸ”¹ Introduction

Object-Oriented Programming (OOP) is a programming paradigm based on the concept of objects.
It helps in organizing code into reusable and modular units, making software more flexible, scalable, and easier to maintain.

ðŸ”¹ Key Concepts of OOP in C++
1. Class

A class is a user-defined data type that contains data members (variables) and member functions (methods).

Syntax:

class ClassName {
    private:
        int data;   // data members
    public:
        void display();  // member functions
};

2. Object

An object is an instance of a class.

Example:

ClassName obj;  // Creating an object
obj.display();  // Calling member function

3. Encapsulation

Wrapping of data and functions together in a single unit (class).

Provides data hiding using access specifiers:

private, protected, public.

4. Abstraction

Hiding implementation details and showing only essential features.

Achieved using:

Abstract classes (with pure virtual functions).

Interfaces (in C++ using abstract classes).

5. Inheritance

One class can inherit properties & behaviors of another.

Types of inheritance in C++:

Single Inheritance

Multiple Inheritance

Multilevel Inheritance

Hierarchical Inheritance

Hybrid Inheritance

Example:

class Parent {
public:
    void show() { cout << "Parent class\n"; }
};

class Child : public Parent {
public:
    void display() { cout << "Child class\n"; }
};

6. Polymorphism

Poly = many, morphism = forms â†’ same function behaves differently.

Two types:

Compile-time (Static) Polymorphism

Function Overloading

Operator Overloading

Run-time (Dynamic) Polymorphism

Function Overriding (using virtual keyword)

Example (Function Overloading):

class Print {
public:
    void show(int x) { cout << "Integer: " << x << endl; }
    void show(double y) { cout << "Double: " << y << endl; }
};

ðŸ”¹ Access Specifiers

Public â†’ Accessible everywhere.

Private â†’ Accessible only inside the class.

Protected â†’ Accessible inside class and derived classes.

ðŸ”¹ Constructors & Destructors

Constructor: Special function with the same name as class, used for initialization.

Destructor: Special function prefixed with ~, used to clean up memory.

Example:

class Example {
public:
    Example() { cout << "Constructor Called"; }
    ~Example() { cout << "Destructor Called"; }
};

ðŸ”¹ Advantages of OOP

Code reusability

Modularity and easy maintenance

Security via data hiding

Flexibility through polymorphism

Extensibility with inheritance
